"""Admin commands for managing bot users and viewing statistics."""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    Application
)
from telegram.constants import ParseMode
from database import Database
import config

db = Database()


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show admin panel with buttons."""
    user_id = update.effective_user.id

    if not db.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
        [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤", callback_data="admin_pricing")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )


async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle admin panel callbacks."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if not db.is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if query.data == "admin_users":
        users = db.get_all_users()

        users_text = "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"

        authorized_users = [u for u in users if u['is_authorized']]
        unauthorized_users = [u for u in users if not u['is_authorized']]

        if authorized_users:
            users_text += "*–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ:*\n"
            for user in authorized_users:
                name = user['first_name'] or "Unknown"
                username = f"@{user['username']}" if user['username'] else ""
                admin_badge = " üëë" if user['is_admin'] else ""
                users_text += f"‚Ä¢ {name} {username}{admin_badge}\n  ID: `{user['user_id']}`\n"
            users_text += "\n"

        if unauthorized_users:
            users_text += "*–û–∂–∏–¥–∞—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:*\n"
            for user in unauthorized_users:
                name = user['first_name'] or "Unknown"
                username = f"@{user['username']}" if user['username'] else ""
                users_text += f"‚Ä¢ {name} {username}\n  ID: `{user['user_id']}`\n"

        users_text += f"\n*–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {len(users)}"

        await query.edit_message_text(users_text, parse_mode=ParseMode.MARKDOWN)

    elif query.data == "admin_stats":
        stats = db.get_total_usage()

        stats_text = (
            "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è*\n\n"
            f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']:,}\n"
            f"–¢–æ–∫–µ–Ω–æ–≤ –≤–≤–æ–¥–∞: {stats['total_input_tokens']:,}\n"
            f"–¢–æ–∫–µ–Ω–æ–≤ –≤—ã–≤–æ–¥–∞: {stats['total_output_tokens']:,}\n"
            f"–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_input_tokens'] + stats['total_output_tokens']:,}\n\n"
            f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* ${stats['total_cost']:.4f}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å: `{config.CLAUDE_MODEL}`"
        )

        await query.edit_message_text(stats_text, parse_mode=ParseMode.MARKDOWN)

    elif query.data == "admin_pricing":
        pricing_text = "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤ Claude*\n\n"

        for model, prices in config.CLAUDE_PRICING.items():
            pricing_text += f"*{model}*\n"
            pricing_text += f"  –í–≤–æ–¥: ${prices['input']:.2f} / 1M —Ç–æ–∫–µ–Ω–æ–≤\n"
            pricing_text += f"  –í—ã–≤–æ–¥: ${prices['output']:.2f} / 1M —Ç–æ–∫–µ–Ω–æ–≤\n\n"

        current = config.CLAUDE_PRICING.get(config.CLAUDE_MODEL)
        if current:
            pricing_text += f"*–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:* `{config.CLAUDE_MODEL}`\n"
            pricing_text += f"–í–≤–æ–¥: ${current['input']:.2f} / 1M\n"
            pricing_text += f"–í—ã–≤–æ–¥: ${current['output']:.2f} / 1M"

        await query.edit_message_text(pricing_text, parse_mode=ParseMode.MARKDOWN)


async def authorize_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Authorize a user by ID."""
    user_id = update.effective_user.id

    if not db.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/authorize <user_id>`\n"
            "–ü—Ä–∏–º–µ—Ä: `/authorize 123456789`",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # Check if user exists in database
    users = db.get_all_users()
    user_exists = any(u['user_id'] == target_user_id for u in users)

    if not user_exists:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    db.authorize_user(target_user_id)
    await update.message.reply_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_user_id}` –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.",
        parse_mode=ParseMode.MARKDOWN
    )


async def deauthorize_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Deauthorize a user by ID."""
    user_id = update.effective_user.id

    if not db.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/deauthorize <user_id>`\n"
            "–ü—Ä–∏–º–µ—Ä: `/deauthorize 123456789`",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    if target_user_id == config.ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    db.deauthorize_user(target_user_id)
    await update.message.reply_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_user_id}` –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.",
        parse_mode=ParseMode.MARKDOWN
    )


async def list_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all users."""
    user_id = update.effective_user.id

    if not db.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    users = db.get_all_users()

    users_text = "üë• *–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"

    authorized_users = [u for u in users if u['is_authorized']]
    unauthorized_users = [u for u in users if not u['is_authorized']]

    if authorized_users:
        users_text += "*–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ:*\n"
        for user in authorized_users:
            name = user['first_name'] or "Unknown"
            username = f"@{user['username']}" if user['username'] else ""
            admin_badge = " üëë" if user['is_admin'] else ""
            users_text += f"‚Ä¢ {name} {username}{admin_badge}\n  ID: `{user['user_id']}`\n"
        users_text += "\n"

    if unauthorized_users:
        users_text += "*–û–∂–∏–¥–∞—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:*\n"
        for user in unauthorized_users:
            name = user['first_name'] or "Unknown"
            username = f"@{user['username']}" if user['username'] else ""
            users_text += f"‚Ä¢ {name} {username}\n  ID: `{user['user_id']}`\n"

    users_text += f"\n*–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {len(users)}"

    await update.message.reply_text(users_text, parse_mode=ParseMode.MARKDOWN)


async def total_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show total usage statistics."""
    user_id = update.effective_user.id

    if not db.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    stats = db.get_total_usage()

    stats_text = (
        "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è*\n\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']:,}\n"
        f"–¢–æ–∫–µ–Ω–æ–≤ –≤–≤–æ–¥–∞: {stats['total_input_tokens']:,}\n"
        f"–¢–æ–∫–µ–Ω–æ–≤ –≤—ã–≤–æ–¥–∞: {stats['total_output_tokens']:,}\n"
        f"–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_input_tokens'] + stats['total_output_tokens']:,}\n\n"
        f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* ${stats['total_cost']:.4f}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å: `{config.CLAUDE_MODEL}`"
    )

    await update.message.reply_text(stats_text, parse_mode=ParseMode.MARKDOWN)


def register_admin_handlers(application: Application):
    """Register all admin command handlers."""
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CommandHandler("authorize", authorize_user_command))
    application.add_handler(CommandHandler("deauthorize", deauthorize_user_command))
    application.add_handler(CommandHandler("users", list_users_command))
    application.add_handler(CommandHandler("totalstats", total_stats_command))
    application.add_handler(CallbackQueryHandler(admin_callback, pattern="^admin_"))
